# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dd2QGegg_dtxvqTjN7OFKL89dmd7HUGu

#Import bibliotek
"""

import os
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

#Łączenie z dyskiem Google
from google.colab import drive
drive.mount("/content/drive")

"""##Wczytywanie modelu"""

#Odkomentuj linijke dla danego modelu

#testowanko = tf.keras.models.load_model("/content/drive/MyDrive/FVR/trained_model_v2.h5")
testowanko = tf.keras.models.load_model("/content/drive/MyDrive/FVR/trained_resnet_model.h5")

"""##Wizualizacja i przewidywanie na pojedynczym obrazie"""

import cv2
image_path = "/content/drive/MyDrive/FVR/test/mango/Image_8.jpg"
img = cv2.imread(image_path)
plt.imshow(img)
plt.title("Obrazek testowy")
plt.xticks([])
plt.yticks([])
plt.show()

"""##Testowanie modelu"""

image = tf.keras.preprocessing.image.load_img(image_path, target_size=(64, 64))
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])
predictions = testowanko.predict(input_arr)

print(predictions[0])
print(max(predictions[0]*100))

test_set = tf.keras.utils.image_dataset_from_directory(
    '/content/drive/MyDrive/FVR/test',
    labels = 'inferred',
    label_mode = 'categorical',
    class_names = None,
    color_mode = 'rgb',
    batch_size = 32,
    image_size = (64, 64),
    shuffle = True,
    seed = None,
    validation_split = None,
    subset = None,
    interpolation = 'bilinear',
    follow_links = False,
    crop_to_aspect_ratio = False
    )

# Ścieżka do katalogu zawierającego podkatalogi z obrazami dla każdej klasy
dataset_path = '/content/drive/MyDrive/FVR/test'

# Zbieranie nazw katalogów i liczby obrazów w każdym z nich
class_labels = []
class_counts = []

for class_name in os.listdir(dataset_path):
    class_dir = os.path.join(dataset_path, class_name)
    if os.path.isdir(class_dir):
        num_images = len(os.listdir(class_dir))
        class_labels.append(class_name)
        class_counts.append(num_images)

# Tworzenie wykresu
plt.figure(figsize=(10, 8))
plt.bar(class_labels, class_counts)
plt.xlabel('Klasy')
plt.ylabel('Ilość obrazów')
plt.title('Rozkład ilości obrazów na klasę w zbiorze testowym')
plt.xticks(rotation=90)  # Obracanie etykiet dla lepszej czytelności
plt.show()

test_set.class_names

test_set.class_names = ['jabłko', 'banan', 'burak', 'papryka', 'kapusta', 'papryka', 'marchew', 'kalafior', 'pieprz chili', 'kukurydza', 'ogórek', 'bakłażan', 'czosnek', 'imbir', 'winogrono', 'jalapeno', 'kiwi', 'cytryna', 'sałata', 'mango', 'cebula', 'pomarańcza', 'papryka', 'gruszka', 'groch', 'ananas', 'granat', 'ziemniak', 'rzodkiewka', 'soja', 'szpinak', 'kukurydza', 'batat', 'pomidor', 'rzepa', 'arbuz']

result_index = np.where(predictions[0] == max(predictions[0]))
print(result_index[0])

plt.imshow(img)
plt.title("Obrazek testowy")
plt.xticks([])
plt.yticks([])
plt.show()

# result_index[0][0] zawiera indeks przewidzianej klasy
predicted_class_index = result_index[0][0]
predicted_class_name = test_set.class_names[predicted_class_index]
formatted_string = "Ta roślina to: {} na {:.2f}%".format(predicted_class_name, max(predictions[0]*100))
print(formatted_string)